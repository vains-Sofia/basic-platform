<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!--    <include resource="org/springframework/boot/logging/logback/base.xml"/>-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、 以及指定<appender>。
        <logger>仅有一个name属性， 一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
          还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
          如果未设置此属性，那么当前logger将会继承上级的级别。
        addtivity:是否向上级logger传递打印信息。默认是true。
        <logger name="org.springframework.web" level="info"/>
        <logger name="org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor" level="INFO"/>
    -->

    <!--
    root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
    不能设置为INHERITED或者同义词NULL。默认是DEBUG
    可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->

    <!-- 4. 最终的策略 可根据环境分别制定不同的日志策略。注意，这里的 allLog 没在root中声明，在上面的 asyncAppLog 声明（异步处理）-->
    <!-- 4.1 开发环境:打印控制台，可把其他打印到文件的<appender-ref>注释 -->
    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <!-- 4.2 生产环境:输出到文档 -->
    <springProfile name="test">
        <!-- 从 Spring Boot 配置文件中，读取 spring.application.name 应用名 -->
        <springProperty name="applicationName" scope="context" source="spring.application.name"/>
        <property name="LOG_HOME" value="logs/${applicationName}"/>

        <!-- 2.1 level为 DEBUG 日志，时间滚动输出  -->
        <appender name="debugLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>${FILE_LOG_THRESHOLD}</level>
            </filter>
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <file>${LOG_HOME}/debug.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-${LOG_HOME}/debug.%d{yyyy-MM-dd}.%i.gz}
                </fileNamePattern>
                <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}</maxFileSize>
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}</totalSizeCap>
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7}</maxHistory>
            </rollingPolicy>

            <!-- 此日志文档只记录debug级别的  level过滤器-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>debug</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 2.2 level为 INFO 日志，时间滚动输出  -->
        <appender name="infoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>${FILE_LOG_THRESHOLD}</level>
            </filter>
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <file>${LOG_HOME}/info.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-${LOG_HOME}/info.%d{yyyy-MM-dd}.%i.gz}
                </fileNamePattern>
                <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}</maxFileSize>
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}</totalSizeCap>
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7}</maxHistory>
            </rollingPolicy>

            <!-- 此日志文档只记录info级别的  level过滤器-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>info</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 2.3 level为 WARN 日志，时间滚动输出  -->
        <appender name="warnLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>${FILE_LOG_THRESHOLD}</level>
            </filter>
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <file>${LOG_HOME}/warn.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-${LOG_HOME}/warn.%d{yyyy-MM-dd}.%i.gz}
                </fileNamePattern>
                <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}</maxFileSize>
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}</totalSizeCap>
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7}</maxHistory>
            </rollingPolicy>

            <!-- 此日志文档只记录warn级别的  level过滤器-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>warn</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 2.4 level为 ERROR 日志，时间滚动输出  -->
        <appender name="errorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>${FILE_LOG_THRESHOLD}</level>
            </filter>
            <encoder>
                <pattern>${FILE_LOG_PATTERN}</pattern>
                <charset>${FILE_LOG_CHARSET}</charset>
            </encoder>
            <file>${LOG_HOME}/error.log</file>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>${LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN:-${LOG_HOME}/error.%d{yyyy-MM-dd}.%i.gz}
                </fileNamePattern>
                <cleanHistoryOnStart>${LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START:-false}</cleanHistoryOnStart>
                <maxFileSize>${LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE:-10MB}</maxFileSize>
                <totalSizeCap>${LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP:-0}</totalSizeCap>
                <maxHistory>${LOGBACK_ROLLINGPOLICY_MAX_HISTORY:-7}</maxHistory>
            </rollingPolicy>

            <!-- 此日志文档只记录error级别的  level过滤器-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>error</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </appender>

        <!-- 2.5 发送日志到 Logstash -->
        <appender name="LOGSTASH" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
            <!-- Logstash 地址和端口 -->
            <destination>127.0.0.1:15050</destination>
            <encoder class="net.logstash.logback.encoder.LogstashEncoder" />
        </appender>

        <!--
        由于队列中还会有没有打印的日志内容，因此需要等待一段时间，等待队列处理完毕。
        单位是ms。如果队列较大，队列内容较多，可以将此值设置的较大。如果超过此时间队列中的日志还没有处理完毕，则队列中的日志将抛弃
        -->
        <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook">
            <delay>2000</delay>
        </shutdownHook>

        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
            <!-- TODO 暂时移除LOGSTASH的日志推送 -->
            <!--            <appender-ref ref="LOGSTASH"/>-->
            <appender-ref ref="warnLog"/>
            <appender-ref ref="debugLog"/>
            <appender-ref ref="infoLog"/>
            <appender-ref ref="errorLog"/>
        </root>
    </springProfile>

</configuration>